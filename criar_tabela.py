# Script: corrigir_associacoes_usuarios.py
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import app
from sqlalchemy import text

def corrigir_associacoes_usuarios():
    with app.app.app_context():
        try:
            print("üîß Verificando e corrigindo associa√ß√µes de usu√°rios...")
            
            with app.db.engine.connect() as connection:
                # 1. Listar todos os usu√°rios n√£o-admin
                usuarios = connection.execute(text(
                    "SELECT id, username, is_admin FROM usuarios WHERE is_admin = 0 OR is_admin IS NULL"
                )).fetchall()
                
                print(f"üë§ Usu√°rios comuns encontrados: {len(usuarios)}")
                for user in usuarios:
                    print(f"  - {user[1]} (ID: {user[0]})")
                
                # 2. Listar empresas ativas
                empresas = connection.execute(text(
                    "SELECT id, nome FROM empresas WHERE ativa = 1"
                )).fetchall()
                
                print(f"üè¢ Empresas ativas: {len(empresas)}")
                for emp in empresas:
                    print(f"  - {emp[1]} (ID: {emp[0]})")
                
                # 3. Verificar associa√ß√µes existentes
                associacoes = connection.execute(text(
                    """SELECT u.username, e.nome, ue.ativo 
                       FROM usuarios_empresas ue
                       JOIN usuarios u ON ue.usuario_id = u.id
                       JOIN empresas e ON ue.empresa_id = e.id
                       WHERE u.is_admin = 0 OR u.is_admin IS NULL"""
                )).fetchall()
                
                print(f"üîó Associa√ß√µes existentes para usu√°rios comuns: {len(associacoes)}")
                for assoc in associacoes:
                    status = "ATIVA" if assoc[2] else "INATIVA"
                    print(f"  - {assoc[0]} ‚Üí {assoc[1]} ({status})")
                
                # 4. Se um usu√°rio espec√≠fico n√£o tem associa√ß√µes, vamos criar
                print(f"\nüéØ Verificando usu√°rios sem associa√ß√µes...")
                
                for usuario in usuarios:
                    user_id = usuario[0]
                    username = usuario[1]
                    
                    # Verificar se tem associa√ß√µes
                    count_assoc = connection.execute(text(
                        "SELECT COUNT(*) FROM usuarios_empresas WHERE usuario_id = :uid AND ativo = 1"
                    ), {"uid": user_id}).scalar()
                    
                    if count_assoc == 0:
                        print(f"‚ö†Ô∏è Usu√°rio {username} sem associa√ß√µes ativas!")
                        
                        # Para demonstra√ß√£o, vamos associar √† primeira empresa ativa
                        # VOC√ä DEVE AJUSTAR ISSO CONFORME SUA REGRA DE NEG√ìCIO
                        if empresas:
                            primeira_empresa = empresas[0]
                            connection.execute(text(
                                """INSERT INTO usuarios_empresas (usuario_id, empresa_id, ativo, data_associacao) 
                                   VALUES (:uid, :eid, 1, NOW())"""
                            ), {"uid": user_id, "eid": primeira_empresa[0]})
                            connection.commit()
                            print(f"‚úÖ Associa√ß√£o criada: {username} ‚Üí {primeira_empresa[1]}")
                    else:
                        print(f"‚úÖ Usu√°rio {username} j√° tem {count_assoc} associa√ß√£o(√µes)")
                
                print(f"\nüéØ Verifica√ß√£o e corre√ß√£o conclu√≠da!")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    corrigir_associacoes_usuarios()
